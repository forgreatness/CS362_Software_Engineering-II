/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 08 00:12:56 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalendarUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-2247), "", "");
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, (-1885), 0, (-1885));
      assertEquals((-1885), appt0.getRecurBy());
      assertEquals((-1885), appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = appt0.isRecurring();
      assertEquals((-1885), appt0.getRecurBy());
      assertEquals((-1885), appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 4, 0, 0, "2Y>TQ", "2Y>TQ");
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("2Y>TQ", appt0.getDescription());
      assertEquals("2Y>TQ", appt0.getTitle());
      assertEquals(4, appt0.getStartDay());
      assertEquals(10, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      CalendarUtil.DaysInMonth = intArray0;
      appt0.setStartMonth(0);
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("2Y>TQ", appt0.getDescription());
      assertEquals("2Y>TQ", appt0.getTitle());
      assertEquals(4, appt0.getStartDay());
      assertEquals(10, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 10, 10, 10, "", "LhB");
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("LhB", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartDay());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(10, appt0.getStartYear());
      assertEquals(11, appt0.getStartHour());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      
      appt0.setStartMinute(60);
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("LhB", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartDay());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(60, appt0.getStartMinute());
      assertEquals(10, appt0.getStartYear());
      assertEquals(11, appt0.getStartHour());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt((-744), (-744), 2755, 0, 60, "calendar.Appt", "calendar.Appt");
      assertEquals((-744), appt0.getStartHour());
      assertEquals("calendar.Appt", appt0.getTitle());
      assertEquals((-744), appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals("calendar.Appt", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(60, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2755, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      
      String string0 = appt0.getTitle();
      assertEquals((-744), appt0.getStartHour());
      assertEquals("calendar.Appt", appt0.getTitle());
      assertEquals((-744), appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals("calendar.Appt", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(60, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2755, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(string0);
      assertEquals("calendar.Appt", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 1513, "", "");
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartHour());
      assertEquals(1513, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      
      appt0.setStartYear(0);
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      int int0 = appt0.getStartYear();
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(1, (-316), 0, 1, 1, "am", "c }");
      assertEquals((-316), appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("am", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1, appt0.getStartHour());
      assertEquals(1, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("c }", appt0.getDescription());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      
      int int0 = appt0.getStartYear();
      assertEquals((-316), appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("am", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1, appt0.getStartHour());
      assertEquals(1, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("c }", appt0.getDescription());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 10, 10, 10, "", "LhB");
      assertEquals(10, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(10, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("LhB", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(11, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartYear());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      
      int int0 = appt0.getStartMonth();
      assertEquals(10, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(10, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("LhB", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(11, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartYear());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt(2291, 0, 0, 3, 0, "z", "/");
      assertEquals("/", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals("z", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2291, appt0.getStartHour());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      
      int int0 = appt0.getStartMinute();
      assertEquals("/", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals("z", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2291, appt0.getStartHour());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt((-1250), (-1250), 5, 5, 3, "", "");
      assertEquals("", appt0.getDescription());
      assertEquals((-1250), appt0.getStartHour());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1250), appt0.getStartMinute());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      
      appt0.setStartMinute(201);
      assertEquals("", appt0.getDescription());
      assertEquals((-1250), appt0.getStartHour());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(201, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      
      int int0 = appt0.getStartMinute();
      assertEquals("", appt0.getDescription());
      assertEquals((-1250), appt0.getStartHour());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(201, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(201, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt(100, 100, 0, 0, 100, "oK", "");
      assertFalse(appt0.isRecurring());
      assertEquals(100, appt0.getStartHour());
      assertEquals(100, appt0.getStartYear());
      assertEquals("oK", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(100, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      
      int int0 = appt0.getStartHour();
      assertFalse(appt0.isRecurring());
      assertEquals(100, appt0.getStartHour());
      assertEquals(100, appt0.getStartYear());
      assertEquals("oK", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(100, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(3, 3, 3, 3, 10, "", "");
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(3, appt0.getStartMinute());
      assertEquals(3, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(3, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartHour());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      
      appt0.setStartHour((-1322));
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-1322), appt0.getStartHour());
      assertEquals(3, appt0.getStartMinute());
      assertEquals(3, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(3, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int int0 = appt0.getStartHour();
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-1322), appt0.getStartHour());
      assertEquals(3, appt0.getStartMinute());
      assertEquals(3, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(3, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals((-1322), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt((-2993), (-2993), 0, 0, 0, (String) null, (String) null);
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2993), appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2993), appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      
      int int0 = appt0.getStartDay();
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2993), appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2993), appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt(3919, (-2394), (-48), 0, (-48), "!U+~LawYP+BtG`Mvf", "!U+~LawYP+BtG`Mvf");
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(3919, appt0.getStartHour());
      assertEquals("!U+~LawYP+BtG`Mvf", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("!U+~LawYP+BtG`Mvf", appt0.getTitle());
      assertEquals((-2394), appt0.getStartMinute());
      assertEquals((-48), appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals((-48), appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(3919, appt0.getStartHour());
      assertEquals("!U+~LawYP+BtG`Mvf", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("!U+~LawYP+BtG`Mvf", appt0.getTitle());
      assertEquals((-2394), appt0.getStartMinute());
      assertEquals((-48), appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals((-48), appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals((-48), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt(100, 100, 0, 0, 100, "oK", "");
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals("oK", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(100, appt0.getStartYear());
      assertEquals(100, appt0.getStartHour());
      assertEquals(0, appt0.getStartDay());
      assertEquals(100, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[3];
      appt0.setRecurrence(intArray0, 100, 0, 1526);
      assertFalse(appt0.getValid());
      assertEquals("oK", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(100, appt0.getStartYear());
      assertEquals(1526, appt0.getRecurNumber());
      assertEquals(100, appt0.getStartHour());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals(100, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(100, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      int int0 = appt0.getRecurNumber();
      assertFalse(appt0.getValid());
      assertEquals("oK", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(100, appt0.getStartYear());
      assertEquals(1526, appt0.getRecurNumber());
      assertEquals(100, appt0.getStartHour());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals(100, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(100, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1526, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-2247), "", "");
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, (-1885), 0, (-1885));
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertTrue(appt0.isRecurring());
      assertEquals((-1885), appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals((-1885), appt0.getRecurBy());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = appt0.getRecurNumber();
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertTrue(appt0.isRecurring());
      assertEquals((-1885), appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals((-1885), appt0.getRecurBy());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals((-1885), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 4, 0, 0, "2Y>TQ", "2Y>TQ");
      assertEquals(10, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(4, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals("2Y>TQ", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(10, appt0.getStartMinute());
      assertEquals("2Y>TQ", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, 431, 2, 10);
      assertEquals(10, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(431, appt0.getRecurBy());
      assertEquals(10, appt0.getRecurNumber());
      assertEquals(4, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals("2Y>TQ", appt0.getTitle());
      assertTrue(appt0.isRecurring());
      assertEquals(10, appt0.getStartMinute());
      assertEquals("2Y>TQ", appt0.getDescription());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = appt0.getRecurIncrement();
      assertEquals(10, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(431, appt0.getRecurBy());
      assertEquals(10, appt0.getRecurNumber());
      assertEquals(4, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals("2Y>TQ", appt0.getTitle());
      assertTrue(appt0.isRecurring());
      assertEquals(10, appt0.getStartMinute());
      assertEquals("2Y>TQ", appt0.getDescription());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 24, "", "z2Z?P?8x#H/I");
      assertEquals(24, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("z2Z?P?8x#H/I", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, 0, (-253), 892);
      assertEquals(24, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals((-253), appt0.getRecurIncrement());
      assertEquals("z2Z?P?8x#H/I", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertTrue(appt0.isRecurring());
      assertEquals(892, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = appt0.getRecurIncrement();
      assertEquals(24, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals((-253), appt0.getRecurIncrement());
      assertEquals("z2Z?P?8x#H/I", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertTrue(appt0.isRecurring());
      assertEquals(892, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals((-253), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-2247), "", "");
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, (-1885), 0, (-1885));
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals((-1885), appt0.getRecurBy());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals((-1885), appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = appt0.getRecurDays();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals((-1885), appt0.getRecurBy());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals((-1885), appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[0];
      appt0.setRecurrence(intArray0, 0, (-1), 0);
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals((-1), appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = appt0.getRecurBy();
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals((-1), appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-2247), "", "");
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, (-1885), 0, (-1885));
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals((-1885), appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals((-1885), appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = appt0.getRecurBy();
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals((-1885), appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals((-1885), appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals((-1885), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 10, 10, 10, "", "LhB");
      assertEquals(10, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(10, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals("LhB", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(11, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      
      String string0 = appt0.getDescription();
      assertEquals(10, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(10, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals("LhB", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(11, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(string0);
      assertEquals("LhB", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(100, 287, 0, 0, 31, "", "7};!Yy+^5D@7S..");
      assertEquals(2, appt0.getRecurBy());
      assertEquals(287, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(31, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(100, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartYear(31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 9, 0, "", (String) null);
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getDescription());
      assertEquals(9, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[3];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartYear(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(0, (-1202), 0, 0, 110, "WbgJNiFw06w6", "WbgJNiFw06w6");
      assertEquals("WbgJNiFw06w6", appt0.getTitle());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(110, appt0.getStartYear());
      assertEquals("WbgJNiFw06w6", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1202), appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMonth(1340);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt((-48), (-48), (-48), 0, 0, " ", " ");
      assertEquals((-48), appt0.getStartDay());
      assertEquals(" ", appt0.getDescription());
      assertEquals(" ", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-48), appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals((-48), appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      
      // Undeclared exception!
      try { 
        appt0.setStartMonth((-29));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -29
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(0, (-2323), 0, 0, (-869), "", "&");
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals((-869), appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals((-2323), appt0.getStartMinute());
      assertEquals("&", appt0.getDescription());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMinute((-2323));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(1765, (-1007), 11, 0, 0, (String) null, (String) null);
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals((-1007), appt0.getStartMinute());
      assertEquals(1765, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(11, appt0.getStartDay());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      
      appt0.setStartMonth(10);
      assertEquals(10, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals((-1007), appt0.getStartMinute());
      assertEquals(1765, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(11, appt0.getStartDay());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      
      int[] intArray0 = new int[7];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(2281, 11, 11, 1, 2281, (String) null, "F;wT?~v@E8shUM");
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals("F;wT?~v@E8shUM", appt0.getDescription());
      assertEquals(2281, appt0.getStartYear());
      assertEquals(2281, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(11, appt0.getStartDay());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartHour(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt((-1250), (-1250), (-1250), 5, 3, "", "");
      assertEquals("", appt0.getDescription());
      assertEquals((-1250), appt0.getStartHour());
      assertEquals((-1250), appt0.getStartDay());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(3, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-1250), appt0.getStartMinute());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[0];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartHour(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt(239, 239, 239, 0, 239, "calendar.Appt", "calendar.Appt");
      assertFalse(appt0.isRecurring());
      assertEquals(239, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("calendar.Appt", appt0.getDescription());
      assertEquals(239, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(239, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(239, appt0.getStartYear());
      assertEquals("calendar.Appt", appt0.getTitle());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartDay(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 7, 11, 0, (String) null, (String) null);
      assertEquals(11, appt0.getStartMinute());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getDescription());
      assertEquals(11, appt0.getStartHour());
      assertEquals(7, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      
      int[] intArray0 = new int[2];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartDay((-3226));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Appt appt0 = null;
      try {
        appt0 = new Appt(986, 986, 986, 986, 986, "calendar.CalendarUtil", "calendar.CalendarUtil");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 986
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = new Appt((-1250), (-1250), (-1250), 5, 3, "", "");
      appt0.setDescription("");
      assertEquals(3, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-1250), appt0.getStartMinute());
      assertEquals((-1250), appt0.getStartHour());
      assertEquals((-1250), appt0.getStartDay());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt(639, 639, 0, 0, 60, (String) null, (String) null);
      appt0.setDescription((String) null);
      assertEquals(60, appt0.getStartYear());
      assertEquals(639, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(639, appt0.getStartHour());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appt appt0 = new Appt((-2993), (-2993), 0, 0, 0, (String) null, (String) null);
      appt0.setTitle((String) null);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2993), appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2993), appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Appt appt0 = new Appt((-1250), (-1250), 5, 5, 3, "", "");
      appt0.setTitle(")X|^cS:#cZa ");
      assertEquals(")X|^cS:#cZa ", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Appt appt0 = new Appt(3, 3, 4320, 3, 0, "", "");
      assertEquals(0, appt0.getStartYear());
      assertEquals(3, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(3, appt0.getStartMinute());
      assertEquals(4320, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-2247), "", "");
      int int0 = appt0.getRecurNumber();
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals((-2247), appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Appt appt0 = new Appt((-1250), (-1250), 5, 5, 3, "", "");
      int int0 = appt0.getStartMinute();
      assertEquals(3, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-1250), appt0.getStartHour());
      assertEquals((-1250), int0);
      assertEquals(5, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "cq.r5XHTH/ktR4a0", "cq.r5XHTH/ktR4a0");
      int int0 = appt0.getStartHour();
      assertEquals(0, int0);
      assertEquals("cq.r5XHTH/ktR4a0", appt0.getTitle());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Appt appt0 = new Appt((-48), (-48), (-48), 0, 0, " ", " ");
      int int0 = appt0.getStartMonth();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-48), appt0.getStartHour());
      assertEquals(" ", appt0.getDescription());
      assertEquals((-48), appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-48), appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-2247), "", "");
      int int0 = appt0.getStartYear();
      assertEquals(0, appt0.getStartMinute());
      assertEquals((-2247), int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Appt appt0 = new Appt((-1250), (-1250), 5, 5, 3, "", "");
      boolean boolean0 = appt0.getValid();
      assertFalse(boolean0);
      assertEquals(5, appt0.getStartDay());
      assertEquals((-1250), appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1250), appt0.getStartHour());
      assertEquals(3, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 10, 10, 10, "", "LhB");
      String string0 = appt0.getTitle();
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals("", string0);
      assertEquals(11, appt0.getStartHour());
      assertEquals(10, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(10, appt0.getStartDay());
      assertEquals(10, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(11, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 1513, "", "");
      appt0.getDescription();
      assertEquals(1513, appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Appt appt0 = new Appt(2281, 11, 11, 1, 2281, (String) null, (String) null);
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(2281, appt0.getStartYear());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(2281, appt0.getStartHour());
      assertEquals(11, int0);
      assertEquals(1, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Appt appt0 = new Appt(2281, 11, 11, 1, 2281, (String) null, "F;wT?~v@E8shUM");
      assertEquals(2281, appt0.getStartHour());
      
      appt0.setStartHour(0);
      String string0 = appt0.toString();
      assertEquals("\t1/11/2281 at 12:11am ,, F;wT?~v@E8shUM\n", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, (String) null, (String) null);
      appt0.setStartHour(16);
      appt0.toString();
      assertEquals(16, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 10, 10, 10, "", "LhB");
      String string0 = appt0.toString();
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("\t10/10/10 at 11:11am ,, LhB\n", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 4, 0, 0, "2Y>TQ", "2Y>TQ");
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, 431, 2, 10);
      boolean boolean0 = appt0.isRecurring();
      assertEquals(10, appt0.getRecurNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Appt appt0 = new Appt(2281, 11, 11, 1, 2281, (String) null, (String) null);
      appt0.setRecurrence((int[]) null, 2339, 2339, 0);
      assertEquals(2339, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Appt appt0 = new Appt(24, 0, 0, 0, 0, "yZOwir]G1l\"E", ":");
      appt0.setStartDay(24);
      assertEquals(24, appt0.getStartHour());
      
      int[] intArray0 = new int[8];
      CalendarUtil.DaysInMonth = intArray0;
      appt0.setStartHour(0);
      assertEquals(0, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Appt appt0 = new Appt(2281, 11, 11, 1, 2281, (String) null, (String) null);
      appt0.setStartHour(12);
      appt0.setStartMinute(2339);
      assertEquals(2339, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Appt appt0 = new Appt((-1250), (-1250), 5, 5, 3, "", "");
      appt0.setStartHour(3);
      appt0.setStartMinute(10);
      boolean boolean0 = appt0.getValid();
      assertEquals(3, appt0.getStartHour());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Appt appt0 = new Appt(2281, 11, 11, 1, 2281, (String) null, (String) null);
      int[] intArray0 = appt0.getRecurDays();
      assertEquals(11, appt0.getStartDay());
      assertEquals(2281, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(2281, appt0.getStartHour());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(1, appt0.getStartMonth());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Appt appt0 = new Appt(2281, 11, 11, 1, 2281, (String) null, (String) null);
      int int0 = appt0.getRecurBy();
      assertEquals(2281, appt0.getStartYear());
      assertEquals(2281, appt0.getStartHour());
      assertEquals(2, int0);
      assertEquals(11, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(11, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 24, "", "z2Z?P?8x#H/I");
      int int0 = appt0.getRecurIncrement();
      assertEquals(0, int0);
      assertEquals(24, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Appt appt0 = new Appt(2281, 11, 11, 1, 2281, (String) null, (String) null);
      appt0.setStartHour(12);
      appt0.toString();
      assertEquals(12, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Appt appt0 = new Appt(2281, 11, 11, 1, 2281, (String) null, (String) null);
      String string0 = appt0.toString();
      assertEquals(11, appt0.getStartDay());
      assertNull(string0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2281, appt0.getStartHour());
      assertEquals(2281, appt0.getStartYear());
      assertEquals(11, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 4, 0, 0, "2Y>TQ", "2Y>TQ");
      boolean boolean0 = appt0.isRecurring();
      assertEquals(2, appt0.getRecurBy());
      assertFalse(boolean0);
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(4, appt0.getStartDay());
      assertEquals(10, appt0.getStartHour());
  }
}
